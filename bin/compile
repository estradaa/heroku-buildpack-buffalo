#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# setup
set -e
set -o pipefail
set -u

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=`cd $(dirname $0); cd ..; pwd`
CURL="curl -s -L --retry 15 --retry-delay 2" # retry for up to 30 seconds

PKG_NAME="github.com/Skookum/digital-mouth-campaign-mgmt-api" # TODO
BINARY_NAME="campaign-mgmt-api" # TODO

export GOPATH

# utils
log_indent() { sed -u 's/^/       /'; }
log_info() { echo "$@" | log_indent; }
log_step() { echo "-----> $@"; }


# blocks
ensureGo() {
  local goVersion="go1.8.3" # TODO
  local goPath="${CACHE_DIR}/go/${goVersion}"
  local goFile="${goVersion}.linux-amd64.tar.gz"
  local goRepo="https://storage.googleapis.com/golang"

  if [ -d "${goPath}" ]; then
    log_step "Using ${goVersion}"
  else
    log_step "Installing ${goVersion}"

    rm -rf "${CACHE_DIR}/*"
    mkdir -p "${goPath}"

    pushd "${goPath}" &> /dev/null
      log_info "Fetching ${goFile}"
      ${CURL} -O "${goRepo}/${goFile}"
      tar -C "${goPath}" --strip-components=1 -zxf "${goPath}/${goFile}"
      rm -f "${goPath}/${goFile}"
    popd &> /dev/null
  fi

  export GOROOT="${goPath}"
  PATH="${goPath}/bin:${PATH}"
}

ensureDep() {
  local depVersion="master" # TODO
  GOPATH="${CACHE_DIR}/dep/${depVersion}"
  PATH="${GOPATH}/bin:${PATH}"

  if [ -d "${GOPATH}" ]; then
    log_step "Using Dep ${depVersion}"
  else
    log_step "Installing Dep ${depVersion}"

    rm -rf "${CACHE_DIR}/dep/*"
    mkdir -p "${GOPATH}"

    log_info "Fetching Dep's source"
    go get -u -v github.com/golang/dep/cmd/dep
    go install -v github.com/golang/dep/cmd/dep
  fi
}

ensureBuffalo() {
  local buffaloVersion="0.9.0" # TODO
  GOPATH="${CACHE_DIR}/buffalo/${buffaloVersion}"
  PATH="${GOPATH}/bin:${PATH}"

  if [ -d "${GOPATH}" ]; then
    log_step "Using Buffalo ${buffaloVersion}"
  else
    log_step "Installing Buffalo ${buffaloVersion}"

    rm -rf "${CACHE_DIR}/buffalo/*"
    mkdir -p "${GOPATH}"

    log_info "Fetching Buffalo's source"
    go get -u -v github.com/gobuffalo/buffalo/buffalo
    go install -v github.com/gobuffalo/buffalo/buffalo
  fi
}

setGOPATH() {
  local name="$1"
  local tmp="$(mktemp -d)"

  GOPATH="${tmp}/.go"
  local src_dir="${GOPATH}/src/${name}"
  mkdir -p "${src_dir}"
  cp -R ${BUILD_DIR}/* ${src_dir}

  echo "GOPATH=${GOPATH}"
  echo "src_dir=${src_dir}"
}

buildApp() {
  local pkg="${1}"
  eval "$(setGOPATH ${pkg})"
  cd "${src_dir}"

  log_step "Fetching dependencies (dep ensure)"
  log_info "Using PATH=${PATH}"
  log_info "Using GOPATH=${GOPATH}"
  log_info "Using src_dir=${src_dir}"
  dep ensure 2>&1

  log_step "Building application (buffalo build --static)"
  log_info "Binary output=${BUILD_DIR}/bin/${2}"
  mkdir -p "${BUILD_DIR}/bin"
  echo "this is pwd result"
  pwd
  echo "this is ls result"
  ls
  buffalo build --static -o "${BUILD_DIR}/bin/${2}"

  PATH="${BUILD_DIR}/bin:${PATH}"
}

genProcfile() {
  echo -e "web: $(basename $1)" > "${BUILD_DIR}/Procfile"
}

genProfileD() {
  cd "${BUILD_DIR}"
  mkdir -p "${BUILD_DIR}/.profile.d"
  echo 'PATH=$PATH:$HOME/bin' > "${BUILD_DIR}/.profile.d/go.sh"
}


# main
ensureGo
ensureDep
ensureBuffalo
buildApp "${PKG_NAME}" "${BINARY_NAME}"
genProcfile "${BINARY_NAME}"
genProfileD
